(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{447:function(t,a,e){"use strict";e.r(a);var i=e(2),s=Object(i.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"本人使用较多的git命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本人使用较多的git命令"}},[t._v("#")]),t._v(" 本人使用较多的git命令")]),t._v(" "),a("p",[t._v("工作区 --\x3e 暂存区\n"),a("code",[t._v("git add .")]),t._v("\n暂存区 --\x3e 仓库区\n"),a("code",[t._v("git commit -m 'msg'")]),t._v("\n远程  --\x3e 本地\n"),a("code",[t._v("git clone url")]),t._v("\n初始化\n"),a("code",[t._v("git init")]),t._v("\n查看所有分支\n"),a("code",[t._v("git branch -a")]),t._v("\n仓库 --\x3e 远程\n"),a("code",[t._v("git push origin 本地分支：远程分支")]),t._v("\n克隆指定分支\n"),a("code",[t._v("git clone -b 远程分支")]),t._v("\n查看远程\n"),a("code",[t._v("git remote -v")]),t._v("\n获取远程master的分支的代码到临时新建的temp\n"),a("code",[t._v("git fetch origin master:temp")]),t._v("\n查看temp分支与当前分支的差异\n"),a("code",[t._v("git diff temp")]),t._v("\n将临时分支temp合并到当前分支\n"),a("code",[t._v("git merge tmep")]),t._v("\n删除临时分支（D可以删除未合并的分支,d不可以）\n"),a("code",[t._v("git branch -D temp")]),t._v("\n设置远程地址\n"),a("code",[t._v("git remote add <name> url")]),t._v("\n拉取至指定分支\n"),a("code",[t._v("git fetch origin xxx:xxx")])]),t._v(" "),a("h3",{attrs:{id:"遇见错误1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遇见错误1"}},[t._v("#")]),t._v(" 遇见错误1")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git push 出现报错 error: failed to push some refs to\n原因:\nGit仓库中已经有一部分代码，所以它不允许你直接把你的代码覆盖上去。\n远程仓库和本地仓库存在差异。\n一般都是因为你在码云创建的仓库有ReadMe文件，而本地没有，造成本地和远程的不同步，\n解决方法：\n一、方法一 同步\n1、git pull origin master --allow-unrelated-histories //把远程仓库和本地同步，消除差异\n2、重新add和commit相应文件\n3、git push origin master   //推送到远程\n4、完活！\n")])])]),a("h3",{attrs:{id:"遇见错误2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遇见错误2"}},[t._v("#")]),t._v(" 遇见错误2")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git status后use git add<file>... to update what will be committed \n")])])]),a("p",[t._v("拷贝一份文件到外面，再进行add和commit")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"git-6-大常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-6-大常用命令"}},[t._v("#")]),t._v(" git 6 大常用命令")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git clone \ngit log\ngit tag\ngit branch 本地\ngit branch -a 所以分支\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"新建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新建"}},[t._v("#")]),t._v(" 新建")]),t._v(" "),a("p",[a("code",[t._v("git init")]),t._v(" "),a("code",[t._v("git init [project-name]")]),t._v(" "),a("code",[t._v("git clone [url]")])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(' git config --list  查看\n git config -e [--global] 编辑\n git config [--global] user.name "[name]"\n git config [--global] user.email "[email address]"\n')])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"增加删除文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#增加删除文件"}},[t._v("#")]),t._v(" 增加删除文件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git add [file1] [file2] ...  指定文件\ngit add [dir]                指定目录\ngit add .                    所有\ngit rm [file1] [file2] ...   删除工作区文件，并且将这次删除放入暂存区\ngit rm --cached [file]       停止追踪指定文件，但该文件会保留在工作区\ngit mv [file-original] [file-renamed] 改名文件，并且将这个改名放入暂存区\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"代码提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码提交"}},[t._v("#")]),t._v(" 代码提交")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git commit -m [message]\ngit commit [file1] [file2] ... -m [message]  指定文件\ngit commit -a  提交工作区自上次commit之后的变化，直接到仓库区\ngit commit -v  提交时显示所有diff信息\ngit commit --amend -m [message] \n使用一次新的commit，替代上一次提交(划重点替代)\n如果代码没有任何新变化，则用来改写上一次commit的提交信息\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[t._v("#")]),t._v(" 分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git branch [branch-name] 创建新分支\ngit checkout -b [branch] 创建新分支并转到该分支\ngit branch [branch] [commit] 创建分支，指向指定commit\ngit merge [branch] 合并指定分支到当前分支\ngit branch -d [branch-name] 删除分支\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"查看信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看信息"}},[t._v("#")]),t._v(" 查看信息")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git status 显示有变更的文件\ngit log 显示当前分支的版本历史\ngit diff 显示暂存区和工作区的差异\ngit diff HEAD 显示工作区与当前分支最新commit之间的差异\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"远程同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#远程同步"}},[t._v("#")]),t._v(" 远程同步")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git fetch [remote]\ngit remote -v 显示所有远程仓库\n git pull [remote] [branch] 取回远程仓库的变化，并与本地分支合并\n git push [remote] --force  强行推送当前分支到远程仓库，即使有冲突\ngit push [remote] --all  推送所有分支到远程仓库\n git reset --hard [commit]重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);